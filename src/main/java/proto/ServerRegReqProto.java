// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerRegReq.proto

package proto;

public final class ServerRegReqProto {
  private ServerRegReqProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface ServerRegReqOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.ServerRegReq)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required int32 serverid = 1;</code>
     *
     * <pre>
     * serverid
     * </pre>
     */
    boolean hasServerid();
    /**
     * <code>required int32 serverid = 1;</code>
     *
     * <pre>
     * serverid
     * </pre>
     */
    int getServerid();

    /**
     * <code>required int32 serverType = 2;</code>
     *
     * <pre>
     * 服务器类型
     * </pre>
     */
    boolean hasServerType();
    /**
     * <code>required int32 serverType = 2;</code>
     *
     * <pre>
     * 服务器类型
     * </pre>
     */
    int getServerType();

    /**
     * <code>required int32 gameId = 3;</code>
     *
     * <pre>
     * 游戏id
     * </pre>
     */
    boolean hasGameId();
    /**
     * <code>required int32 gameId = 3;</code>
     *
     * <pre>
     * 游戏id
     * </pre>
     */
    int getGameId();

    /**
     * <code>required string clicentName = 4;</code>
     *
     * <pre>
     * 客户单名字
     * </pre>
     */
    boolean hasClicentName();
    /**
     * <code>required string clicentName = 4;</code>
     *
     * <pre>
     * 客户单名字
     * </pre>
     */
    java.lang.String getClicentName();
    /**
     * <code>required string clicentName = 4;</code>
     *
     * <pre>
     * 客户单名字
     * </pre>
     */
    com.google.protobuf.ByteString
        getClicentNameBytes();

    /**
     * <code>required string clicentIp = 5;</code>
     *
     * <pre>
     * 服务端ip
     * </pre>
     */
    boolean hasClicentIp();
    /**
     * <code>required string clicentIp = 5;</code>
     *
     * <pre>
     * 服务端ip
     * </pre>
     */
    java.lang.String getClicentIp();
    /**
     * <code>required string clicentIp = 5;</code>
     *
     * <pre>
     * 服务端ip
     * </pre>
     */
    com.google.protobuf.ByteString
        getClicentIpBytes();

    /**
     * <code>required int32 clicentprot = 6;</code>
     *
     * <pre>
     * 服务端端口
     * </pre>
     */
    boolean hasClicentprot();
    /**
     * <code>required int32 clicentprot = 6;</code>
     *
     * <pre>
     * 服务端端口
     * </pre>
     */
    int getClicentprot();

    /**
     * <code>required bool allowTakeScoreInGame = 7;</code>
     *
     * <pre>
     *是否允许在游戏中从保险柜提取游戏币
     * </pre>
     */
    boolean hasAllowTakeScoreInGame();
    /**
     * <code>required bool allowTakeScoreInGame = 7;</code>
     *
     * <pre>
     *是否允许在游戏中从保险柜提取游戏币
     * </pre>
     */
    boolean getAllowTakeScoreInGame();

    /**
     * <code>required bool allowSaveScoreInGame = 8;</code>
     *
     * <pre>
     *是否允许在游戏中向保险柜保存游戏币
     * </pre>
     */
    boolean hasAllowSaveScoreInGame();
    /**
     * <code>required bool allowSaveScoreInGame = 8;</code>
     *
     * <pre>
     *是否允许在游戏中向保险柜保存游戏币
     * </pre>
     */
    boolean getAllowSaveScoreInGame();
  }
  /**
   * Protobuf type {@code proto.ServerRegReq}
   *
   * <pre>
   * 这个是 注册服务命令
   * </pre>
   */
  public static final class ServerRegReq extends
      com.google.protobuf.GeneratedMessageLite implements
      // @@protoc_insertion_point(message_implements:proto.ServerRegReq)
      ServerRegReqOrBuilder {
    // Use ServerRegReq.newBuilder() to construct.
    private ServerRegReq(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ServerRegReq(boolean noInit) { this.unknownFields = com.google.protobuf.ByteString.EMPTY;}

    private static final ServerRegReq defaultInstance;
    public static ServerRegReq getDefaultInstance() {
      return defaultInstance;
    }

    public ServerRegReq getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.ByteString unknownFields;
    private ServerRegReq(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.ByteString.Output unknownFieldsOutput =
          com.google.protobuf.ByteString.newOutput();
      com.google.protobuf.CodedOutputStream unknownFieldsCodedOutput =
          com.google.protobuf.CodedOutputStream.newInstance(
              unknownFieldsOutput);
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              serverid_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              serverType_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gameId_ = input.readInt32();
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              clicentName_ = bs;
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              clicentIp_ = bs;
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              clicentprot_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              allowTakeScoreInGame_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              allowSaveScoreInGame_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        try {
          unknownFieldsCodedOutput.flush();
        } catch (java.io.IOException e) {
        // Should not happen
        } finally {
          unknownFields = unknownFieldsOutput.toByteString();
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<ServerRegReq> PARSER =
        new com.google.protobuf.AbstractParser<ServerRegReq>() {
      public ServerRegReq parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ServerRegReq(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ServerRegReq> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SERVERID_FIELD_NUMBER = 1;
    private int serverid_;
    /**
     * <code>required int32 serverid = 1;</code>
     *
     * <pre>
     * serverid
     * </pre>
     */
    public boolean hasServerid() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 serverid = 1;</code>
     *
     * <pre>
     * serverid
     * </pre>
     */
    public int getServerid() {
      return serverid_;
    }

    public static final int SERVERTYPE_FIELD_NUMBER = 2;
    private int serverType_;
    /**
     * <code>required int32 serverType = 2;</code>
     *
     * <pre>
     * 服务器类型
     * </pre>
     */
    public boolean hasServerType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 serverType = 2;</code>
     *
     * <pre>
     * 服务器类型
     * </pre>
     */
    public int getServerType() {
      return serverType_;
    }

    public static final int GAMEID_FIELD_NUMBER = 3;
    private int gameId_;
    /**
     * <code>required int32 gameId = 3;</code>
     *
     * <pre>
     * 游戏id
     * </pre>
     */
    public boolean hasGameId() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 gameId = 3;</code>
     *
     * <pre>
     * 游戏id
     * </pre>
     */
    public int getGameId() {
      return gameId_;
    }

    public static final int CLICENTNAME_FIELD_NUMBER = 4;
    private java.lang.Object clicentName_;
    /**
     * <code>required string clicentName = 4;</code>
     *
     * <pre>
     * 客户单名字
     * </pre>
     */
    public boolean hasClicentName() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required string clicentName = 4;</code>
     *
     * <pre>
     * 客户单名字
     * </pre>
     */
    public java.lang.String getClicentName() {
      java.lang.Object ref = clicentName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          clicentName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string clicentName = 4;</code>
     *
     * <pre>
     * 客户单名字
     * </pre>
     */
    public com.google.protobuf.ByteString
        getClicentNameBytes() {
      java.lang.Object ref = clicentName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clicentName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CLICENTIP_FIELD_NUMBER = 5;
    private java.lang.Object clicentIp_;
    /**
     * <code>required string clicentIp = 5;</code>
     *
     * <pre>
     * 服务端ip
     * </pre>
     */
    public boolean hasClicentIp() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required string clicentIp = 5;</code>
     *
     * <pre>
     * 服务端ip
     * </pre>
     */
    public java.lang.String getClicentIp() {
      java.lang.Object ref = clicentIp_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          clicentIp_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string clicentIp = 5;</code>
     *
     * <pre>
     * 服务端ip
     * </pre>
     */
    public com.google.protobuf.ByteString
        getClicentIpBytes() {
      java.lang.Object ref = clicentIp_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clicentIp_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CLICENTPROT_FIELD_NUMBER = 6;
    private int clicentprot_;
    /**
     * <code>required int32 clicentprot = 6;</code>
     *
     * <pre>
     * 服务端端口
     * </pre>
     */
    public boolean hasClicentprot() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 clicentprot = 6;</code>
     *
     * <pre>
     * 服务端端口
     * </pre>
     */
    public int getClicentprot() {
      return clicentprot_;
    }

    public static final int ALLOWTAKESCOREINGAME_FIELD_NUMBER = 7;
    private boolean allowTakeScoreInGame_;
    /**
     * <code>required bool allowTakeScoreInGame = 7;</code>
     *
     * <pre>
     *是否允许在游戏中从保险柜提取游戏币
     * </pre>
     */
    public boolean hasAllowTakeScoreInGame() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required bool allowTakeScoreInGame = 7;</code>
     *
     * <pre>
     *是否允许在游戏中从保险柜提取游戏币
     * </pre>
     */
    public boolean getAllowTakeScoreInGame() {
      return allowTakeScoreInGame_;
    }

    public static final int ALLOWSAVESCOREINGAME_FIELD_NUMBER = 8;
    private boolean allowSaveScoreInGame_;
    /**
     * <code>required bool allowSaveScoreInGame = 8;</code>
     *
     * <pre>
     *是否允许在游戏中向保险柜保存游戏币
     * </pre>
     */
    public boolean hasAllowSaveScoreInGame() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required bool allowSaveScoreInGame = 8;</code>
     *
     * <pre>
     *是否允许在游戏中向保险柜保存游戏币
     * </pre>
     */
    public boolean getAllowSaveScoreInGame() {
      return allowSaveScoreInGame_;
    }

    private void initFields() {
      serverid_ = 0;
      serverType_ = 0;
      gameId_ = 0;
      clicentName_ = "";
      clicentIp_ = "";
      clicentprot_ = 0;
      allowTakeScoreInGame_ = false;
      allowSaveScoreInGame_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasServerid()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasServerType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGameId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasClicentName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasClicentIp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasClicentprot()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAllowTakeScoreInGame()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAllowSaveScoreInGame()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, serverid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, serverType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gameId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getClicentNameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getClicentIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, clicentprot_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, allowTakeScoreInGame_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, allowSaveScoreInGame_);
      }
      output.writeRawBytes(unknownFields);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, serverid_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, serverType_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gameId_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getClicentNameBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getClicentIpBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, clicentprot_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, allowTakeScoreInGame_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, allowSaveScoreInGame_);
      }
      size += unknownFields.size();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static proto.ServerRegReqProto.ServerRegReq parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.ServerRegReqProto.ServerRegReq parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.ServerRegReqProto.ServerRegReq parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static proto.ServerRegReqProto.ServerRegReq parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static proto.ServerRegReqProto.ServerRegReq parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static proto.ServerRegReqProto.ServerRegReq parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static proto.ServerRegReqProto.ServerRegReq parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static proto.ServerRegReqProto.ServerRegReq parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static proto.ServerRegReqProto.ServerRegReq parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static proto.ServerRegReqProto.ServerRegReq parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(proto.ServerRegReqProto.ServerRegReq prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code proto.ServerRegReq}
     *
     * <pre>
     * 这个是 注册服务命令
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          proto.ServerRegReqProto.ServerRegReq, Builder>
        implements
        // @@protoc_insertion_point(builder_implements:proto.ServerRegReq)
        proto.ServerRegReqProto.ServerRegReqOrBuilder {
      // Construct using proto.ServerRegReqProto.ServerRegReq.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        serverid_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        serverType_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        gameId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        clicentName_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        clicentIp_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        clicentprot_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        allowTakeScoreInGame_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        allowSaveScoreInGame_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public proto.ServerRegReqProto.ServerRegReq getDefaultInstanceForType() {
        return proto.ServerRegReqProto.ServerRegReq.getDefaultInstance();
      }

      public proto.ServerRegReqProto.ServerRegReq build() {
        proto.ServerRegReqProto.ServerRegReq result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public proto.ServerRegReqProto.ServerRegReq buildPartial() {
        proto.ServerRegReqProto.ServerRegReq result = new proto.ServerRegReqProto.ServerRegReq(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.serverid_ = serverid_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.serverType_ = serverType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gameId_ = gameId_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.clicentName_ = clicentName_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.clicentIp_ = clicentIp_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.clicentprot_ = clicentprot_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.allowTakeScoreInGame_ = allowTakeScoreInGame_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.allowSaveScoreInGame_ = allowSaveScoreInGame_;
        result.bitField0_ = to_bitField0_;
        return result;
      }

      public Builder mergeFrom(proto.ServerRegReqProto.ServerRegReq other) {
        if (other == proto.ServerRegReqProto.ServerRegReq.getDefaultInstance()) return this;
        if (other.hasServerid()) {
          setServerid(other.getServerid());
        }
        if (other.hasServerType()) {
          setServerType(other.getServerType());
        }
        if (other.hasGameId()) {
          setGameId(other.getGameId());
        }
        if (other.hasClicentName()) {
          bitField0_ |= 0x00000008;
          clicentName_ = other.clicentName_;
          
        }
        if (other.hasClicentIp()) {
          bitField0_ |= 0x00000010;
          clicentIp_ = other.clicentIp_;
          
        }
        if (other.hasClicentprot()) {
          setClicentprot(other.getClicentprot());
        }
        if (other.hasAllowTakeScoreInGame()) {
          setAllowTakeScoreInGame(other.getAllowTakeScoreInGame());
        }
        if (other.hasAllowSaveScoreInGame()) {
          setAllowSaveScoreInGame(other.getAllowSaveScoreInGame());
        }
        setUnknownFields(
            getUnknownFields().concat(other.unknownFields));
        return this;
      }

      public final boolean isInitialized() {
        if (!hasServerid()) {
          
          return false;
        }
        if (!hasServerType()) {
          
          return false;
        }
        if (!hasGameId()) {
          
          return false;
        }
        if (!hasClicentName()) {
          
          return false;
        }
        if (!hasClicentIp()) {
          
          return false;
        }
        if (!hasClicentprot()) {
          
          return false;
        }
        if (!hasAllowTakeScoreInGame()) {
          
          return false;
        }
        if (!hasAllowSaveScoreInGame()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        proto.ServerRegReqProto.ServerRegReq parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (proto.ServerRegReqProto.ServerRegReq) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int serverid_ ;
      /**
       * <code>required int32 serverid = 1;</code>
       *
       * <pre>
       * serverid
       * </pre>
       */
      public boolean hasServerid() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 serverid = 1;</code>
       *
       * <pre>
       * serverid
       * </pre>
       */
      public int getServerid() {
        return serverid_;
      }
      /**
       * <code>required int32 serverid = 1;</code>
       *
       * <pre>
       * serverid
       * </pre>
       */
      public Builder setServerid(int value) {
        bitField0_ |= 0x00000001;
        serverid_ = value;
        
        return this;
      }
      /**
       * <code>required int32 serverid = 1;</code>
       *
       * <pre>
       * serverid
       * </pre>
       */
      public Builder clearServerid() {
        bitField0_ = (bitField0_ & ~0x00000001);
        serverid_ = 0;
        
        return this;
      }

      private int serverType_ ;
      /**
       * <code>required int32 serverType = 2;</code>
       *
       * <pre>
       * 服务器类型
       * </pre>
       */
      public boolean hasServerType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 serverType = 2;</code>
       *
       * <pre>
       * 服务器类型
       * </pre>
       */
      public int getServerType() {
        return serverType_;
      }
      /**
       * <code>required int32 serverType = 2;</code>
       *
       * <pre>
       * 服务器类型
       * </pre>
       */
      public Builder setServerType(int value) {
        bitField0_ |= 0x00000002;
        serverType_ = value;
        
        return this;
      }
      /**
       * <code>required int32 serverType = 2;</code>
       *
       * <pre>
       * 服务器类型
       * </pre>
       */
      public Builder clearServerType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        serverType_ = 0;
        
        return this;
      }

      private int gameId_ ;
      /**
       * <code>required int32 gameId = 3;</code>
       *
       * <pre>
       * 游戏id
       * </pre>
       */
      public boolean hasGameId() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 gameId = 3;</code>
       *
       * <pre>
       * 游戏id
       * </pre>
       */
      public int getGameId() {
        return gameId_;
      }
      /**
       * <code>required int32 gameId = 3;</code>
       *
       * <pre>
       * 游戏id
       * </pre>
       */
      public Builder setGameId(int value) {
        bitField0_ |= 0x00000004;
        gameId_ = value;
        
        return this;
      }
      /**
       * <code>required int32 gameId = 3;</code>
       *
       * <pre>
       * 游戏id
       * </pre>
       */
      public Builder clearGameId() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gameId_ = 0;
        
        return this;
      }

      private java.lang.Object clicentName_ = "";
      /**
       * <code>required string clicentName = 4;</code>
       *
       * <pre>
       * 客户单名字
       * </pre>
       */
      public boolean hasClicentName() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required string clicentName = 4;</code>
       *
       * <pre>
       * 客户单名字
       * </pre>
       */
      public java.lang.String getClicentName() {
        java.lang.Object ref = clicentName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clicentName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string clicentName = 4;</code>
       *
       * <pre>
       * 客户单名字
       * </pre>
       */
      public com.google.protobuf.ByteString
          getClicentNameBytes() {
        java.lang.Object ref = clicentName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clicentName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string clicentName = 4;</code>
       *
       * <pre>
       * 客户单名字
       * </pre>
       */
      public Builder setClicentName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        clicentName_ = value;
        
        return this;
      }
      /**
       * <code>required string clicentName = 4;</code>
       *
       * <pre>
       * 客户单名字
       * </pre>
       */
      public Builder clearClicentName() {
        bitField0_ = (bitField0_ & ~0x00000008);
        clicentName_ = getDefaultInstance().getClicentName();
        
        return this;
      }
      /**
       * <code>required string clicentName = 4;</code>
       *
       * <pre>
       * 客户单名字
       * </pre>
       */
      public Builder setClicentNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        clicentName_ = value;
        
        return this;
      }

      private java.lang.Object clicentIp_ = "";
      /**
       * <code>required string clicentIp = 5;</code>
       *
       * <pre>
       * 服务端ip
       * </pre>
       */
      public boolean hasClicentIp() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required string clicentIp = 5;</code>
       *
       * <pre>
       * 服务端ip
       * </pre>
       */
      public java.lang.String getClicentIp() {
        java.lang.Object ref = clicentIp_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            clicentIp_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string clicentIp = 5;</code>
       *
       * <pre>
       * 服务端ip
       * </pre>
       */
      public com.google.protobuf.ByteString
          getClicentIpBytes() {
        java.lang.Object ref = clicentIp_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clicentIp_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string clicentIp = 5;</code>
       *
       * <pre>
       * 服务端ip
       * </pre>
       */
      public Builder setClicentIp(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        clicentIp_ = value;
        
        return this;
      }
      /**
       * <code>required string clicentIp = 5;</code>
       *
       * <pre>
       * 服务端ip
       * </pre>
       */
      public Builder clearClicentIp() {
        bitField0_ = (bitField0_ & ~0x00000010);
        clicentIp_ = getDefaultInstance().getClicentIp();
        
        return this;
      }
      /**
       * <code>required string clicentIp = 5;</code>
       *
       * <pre>
       * 服务端ip
       * </pre>
       */
      public Builder setClicentIpBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        clicentIp_ = value;
        
        return this;
      }

      private int clicentprot_ ;
      /**
       * <code>required int32 clicentprot = 6;</code>
       *
       * <pre>
       * 服务端端口
       * </pre>
       */
      public boolean hasClicentprot() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 clicentprot = 6;</code>
       *
       * <pre>
       * 服务端端口
       * </pre>
       */
      public int getClicentprot() {
        return clicentprot_;
      }
      /**
       * <code>required int32 clicentprot = 6;</code>
       *
       * <pre>
       * 服务端端口
       * </pre>
       */
      public Builder setClicentprot(int value) {
        bitField0_ |= 0x00000020;
        clicentprot_ = value;
        
        return this;
      }
      /**
       * <code>required int32 clicentprot = 6;</code>
       *
       * <pre>
       * 服务端端口
       * </pre>
       */
      public Builder clearClicentprot() {
        bitField0_ = (bitField0_ & ~0x00000020);
        clicentprot_ = 0;
        
        return this;
      }

      private boolean allowTakeScoreInGame_ ;
      /**
       * <code>required bool allowTakeScoreInGame = 7;</code>
       *
       * <pre>
       *是否允许在游戏中从保险柜提取游戏币
       * </pre>
       */
      public boolean hasAllowTakeScoreInGame() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required bool allowTakeScoreInGame = 7;</code>
       *
       * <pre>
       *是否允许在游戏中从保险柜提取游戏币
       * </pre>
       */
      public boolean getAllowTakeScoreInGame() {
        return allowTakeScoreInGame_;
      }
      /**
       * <code>required bool allowTakeScoreInGame = 7;</code>
       *
       * <pre>
       *是否允许在游戏中从保险柜提取游戏币
       * </pre>
       */
      public Builder setAllowTakeScoreInGame(boolean value) {
        bitField0_ |= 0x00000040;
        allowTakeScoreInGame_ = value;
        
        return this;
      }
      /**
       * <code>required bool allowTakeScoreInGame = 7;</code>
       *
       * <pre>
       *是否允许在游戏中从保险柜提取游戏币
       * </pre>
       */
      public Builder clearAllowTakeScoreInGame() {
        bitField0_ = (bitField0_ & ~0x00000040);
        allowTakeScoreInGame_ = false;
        
        return this;
      }

      private boolean allowSaveScoreInGame_ ;
      /**
       * <code>required bool allowSaveScoreInGame = 8;</code>
       *
       * <pre>
       *是否允许在游戏中向保险柜保存游戏币
       * </pre>
       */
      public boolean hasAllowSaveScoreInGame() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required bool allowSaveScoreInGame = 8;</code>
       *
       * <pre>
       *是否允许在游戏中向保险柜保存游戏币
       * </pre>
       */
      public boolean getAllowSaveScoreInGame() {
        return allowSaveScoreInGame_;
      }
      /**
       * <code>required bool allowSaveScoreInGame = 8;</code>
       *
       * <pre>
       *是否允许在游戏中向保险柜保存游戏币
       * </pre>
       */
      public Builder setAllowSaveScoreInGame(boolean value) {
        bitField0_ |= 0x00000080;
        allowSaveScoreInGame_ = value;
        
        return this;
      }
      /**
       * <code>required bool allowSaveScoreInGame = 8;</code>
       *
       * <pre>
       *是否允许在游戏中向保险柜保存游戏币
       * </pre>
       */
      public Builder clearAllowSaveScoreInGame() {
        bitField0_ = (bitField0_ & ~0x00000080);
        allowSaveScoreInGame_ = false;
        
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.ServerRegReq)
    }

    static {
      defaultInstance = new ServerRegReq(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.ServerRegReq)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
